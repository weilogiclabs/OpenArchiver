import{_ as s,c as i,o as a,ag as t}from"./chunks/framework.S-Qvb3wi.js";const k=JSON.parse('{"title":"Pluggable Storage Service (StorageService)","description":"","frontmatter":{},"headers":[],"relativePath":"services/storage-service.md","filePath":"services/storage-service.md"}'),n={name:"services/storage-service.md"};function l(r,e,o,h,p,c){return a(),i("div",null,e[0]||(e[0]=[t(`<h1 id="pluggable-storage-service-storageservice" tabindex="-1">Pluggable Storage Service (<code>StorageService</code>) <a class="header-anchor" href="#pluggable-storage-service-storageservice" aria-label="Permalink to &quot;Pluggable Storage Service (\`StorageService\`)&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The <code>StorageService</code> provides a unified, abstract interface for handling file storage across different backends. Its primary purpose is to decouple the application&#39;s core logic from the underlying storage technology. This design allows administrators to switch between storage providers (e.g., from the local filesystem to an S3-compatible object store) with only a configuration change, requiring no modifications to the application code.</p><p>The service is built around a standardized <code>IStorageProvider</code> interface, which guarantees that all storage providers have a consistent API for common operations like storing, retrieving, and deleting files.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>The <code>StorageService</code> is configured via environment variables in the <code>.env</code> file. You must specify the storage backend you wish to use and provide the necessary credentials and settings for it.</p><h3 id="_1-choosing-the-backend" tabindex="-1">1. Choosing the Backend <a class="header-anchor" href="#_1-choosing-the-backend" aria-label="Permalink to &quot;1. Choosing the Backend&quot;">​</a></h3><p>The <code>STORAGE_TYPE</code> variable determines which provider the service will use.</p><ul><li><code>STORAGE_TYPE=local</code>: Uses the local server&#39;s filesystem.</li><li><code>STORAGE_TYPE=s3</code>: Uses an S3-compatible object storage service (e.g., AWS S3, MinIO, Google Cloud Storage).</li></ul><h3 id="_2-local-filesystem-configuration" tabindex="-1">2. Local Filesystem Configuration <a class="header-anchor" href="#_2-local-filesystem-configuration" aria-label="Permalink to &quot;2. Local Filesystem Configuration&quot;">​</a></h3><p>When <code>STORAGE_TYPE</code> is set to <code>local</code>, you must also provide the root path where files will be stored.</p><div class="language-env vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># .env</span></span>
<span class="line"><span>STORAGE_TYPE=local</span></span>
<span class="line"><span>STORAGE_LOCAL_ROOT_PATH=/var/data/open-archiver</span></span></code></pre></div><ul><li><code>STORAGE_LOCAL_ROOT_PATH</code>: The absolute path on the server where the archive will be created. The service will create subdirectories within this path as needed.</li></ul><h3 id="_3-s3-compatible-storage-configuration" tabindex="-1">3. S3-Compatible Storage Configuration <a class="header-anchor" href="#_3-s3-compatible-storage-configuration" aria-label="Permalink to &quot;3. S3-Compatible Storage Configuration&quot;">​</a></h3><p>When <code>STORAGE_TYPE</code> is set to <code>s3</code>, you must provide the credentials and endpoint for your object storage provider.</p><div class="language-env vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># .env</span></span>
<span class="line"><span>STORAGE_TYPE=s3</span></span>
<span class="line"><span>STORAGE_S3_ENDPOINT=http://127.0.0.1:9000</span></span>
<span class="line"><span>STORAGE_S3_BUCKET=email-archive</span></span>
<span class="line"><span>STORAGE_S3_ACCESS_KEY_ID=minioadmin</span></span>
<span class="line"><span>STORAGE_S3_SECRET_ACCESS_KEY=minioadmin</span></span>
<span class="line"><span>STORAGE_S3_REGION=us-east-1</span></span>
<span class="line"><span>STORAGE_S3_FORCE_PATH_STYLE=true</span></span></code></pre></div><ul><li><code>STORAGE_S3_ENDPOINT</code>: The full URL of the S3 API endpoint.</li><li><code>STORAGE_S3_BUCKET</code>: The name of the bucket to use for storage.</li><li><code>STORAGE_S3_ACCESS_KEY_ID</code>: The access key for your S3 user.</li><li><code>STORAGE_S3_SECRET_ACCESS_KEY</code>: The secret key for your S3 user.</li><li><code>STORAGE_S3_REGION</code> (Optional): The AWS region of your bucket. Recommended for AWS S3.</li><li><code>STORAGE_S3_FORCE_PATH_STYLE</code> (Optional): Set to <code>true</code> when using non-AWS S3 services like MinIO.</li></ul><h2 id="how-to-use-the-service" tabindex="-1">How to Use the Service <a class="header-anchor" href="#how-to-use-the-service" aria-label="Permalink to &quot;How to Use the Service&quot;">​</a></h2><p>The <code>StorageService</code> is designed to be used via dependency injection in other services. You should never instantiate the providers (<code>LocalFileSystemProvider</code> or <code>S3StorageProvider</code>) directly. Instead, create an instance of <code>StorageService</code> and the factory will provide the correct provider based on your <code>.env</code> configuration.</p><h3 id="example-usage-in-ingestionservice" tabindex="-1">Example: Usage in <code>IngestionService</code> <a class="header-anchor" href="#example-usage-in-ingestionservice" aria-label="Permalink to &quot;Example: Usage in \`IngestionService\`&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { StorageService } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./StorageService&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IngestionService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> storageService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StorageService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // The StorageService is instantiated without any arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // It automatically reads the configuration from the environment.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.storageService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StorageService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> archiveEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        rawEmail</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        userId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        messageId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Define a structured, unique path for the email.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> archivePath</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}/messages/\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}.eml\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Use the service. It doesn&#39;t know or care if this is writing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // to a local disk or an S3 bucket.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.storageService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(archivePath, rawEmail);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Successfully archived email to \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">archivePath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Failed to archive email \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><p>The <code>StorageService</code> implements the <code>IStorageProvider</code> interface. All methods are asynchronous and return a <code>Promise</code>.</p><hr><h3 id="put-path-content" tabindex="-1"><code>put(path, content)</code> <a class="header-anchor" href="#put-path-content" aria-label="Permalink to &quot;\`put(path, content)\`&quot;">​</a></h3><p>Stores a file at the specified path. If a file already exists at that path, it will be overwritten.</p><ul><li><strong><code>path: string</code></strong>: A unique identifier for the file, including its directory structure (e.g., <code>&quot;user-123/emails/message-abc.eml&quot;</code>).</li><li><strong><code>content: Buffer | NodeJS.ReadableStream</code></strong>: The content of the file. It can be a <code>Buffer</code> for small files or a <code>ReadableStream</code> for large files to ensure memory efficiency.</li><li><strong>Returns</strong>: <code>Promise&lt;void&gt;</code> - A promise that resolves when the file has been successfully stored.</li></ul><hr><h3 id="get-path" tabindex="-1"><code>get(path)</code> <a class="header-anchor" href="#get-path" aria-label="Permalink to &quot;\`get(path)\`&quot;">​</a></h3><p>Retrieves a file from the specified path as a readable stream.</p><ul><li><strong><code>path: string</code></strong>: The unique identifier of the file to retrieve.</li><li><strong>Returns</strong>: <code>Promise&lt;NodeJS.ReadableStream&gt;</code> - A promise that resolves with a readable stream of the file&#39;s content.</li><li><strong>Throws</strong>: An <code>Error</code> if the file is not found at the specified path.</li></ul><hr><h3 id="delete-path" tabindex="-1"><code>delete(path)</code> <a class="header-anchor" href="#delete-path" aria-label="Permalink to &quot;\`delete(path)\`&quot;">​</a></h3><p>Deletes a file from the storage backend.</p><ul><li><strong><code>path: string</code></strong>: The unique identifier of the file to delete.</li><li><strong>Returns</strong>: <code>Promise&lt;void&gt;</code> - A promise that resolves when the file is deleted. If the file does not exist, the promise will still resolve successfully without throwing an error.</li></ul><hr><h3 id="exists-path" tabindex="-1"><code>exists(path)</code> <a class="header-anchor" href="#exists-path" aria-label="Permalink to &quot;\`exists(path)\`&quot;">​</a></h3><p>Checks for the existence of a file.</p><ul><li><strong><code>path: string</code></strong>: The unique identifier of the file to check.</li><li><strong>Returns</strong>: <code>Promise&lt;boolean&gt;</code> - A promise that resolves with <code>true</code> if the file exists, and <code>false</code> otherwise.</li></ul>`,39)]))}const g=s(n,[["render",l]]);export{k as __pageData,g as default};
